// createMetadata_inline.ts — Metaplex Metadata für DMD mit INLINE Data-URI (kein externer Host nötig)

import * as anchor from "@coral-xyz/anchor";
import { PublicKey, Keypair, Connection, SystemProgram, Transaction } from "@solana/web3.js";
import {
  PROGRAM_ID as TM_PROGRAM_ID,
  createCreateMetadataAccountV3Instruction,
  createUpdateMetadataAccountV2Instruction,
} from "@metaplex-foundation/mpl-token-metadata";

// --- KONFIG ---
const RPC_URL = "https://devnet.helius-rpc.com/?api-key=36a9b483-7c6d-4fac-91aa-96c2e3a446c1";
const MINT = new PublicKey("3W8wtdW8pA8eUfUMJrCnJh9Dto8rc23nfQRJamuh1AWb"); // DMD Mint (Devnet)
const UPDATE_AUTHORITY = new PublicKey("AqPFb5LWQuzKiyoKTX9XgUwsYWoFvpeE8E8uzQvnDTzT"); // Founder (Update-Rechte)

// --- WALLET (Founder / wie im Client) ---
const WALLET = [250,3,56,170,143,151,133,64,143,169,195,121,125,221,62,222,75,250,51,97,119,105,249,103,123,115,115,128,234,61,22,197,146,30,56,149,170,43,130,106,79,242,35,182,206,3,250,163,219,0,80,87,181,11,107,98,64,143,92,169,108,130,174,188];
const signer = Keypair.fromSecretKey(new Uint8Array(WALLET));

// --- deine metadata.json, INLINE ---
const META_JSON = {
  name: "Die Mark Digital",
  symbol: "DMD",
  description: "Die Mark Digital (DMD) – Der digitale Taler für die Zukunft.",
  image: "https://s1.directupload.net/images/250809/hrmdi8v.jpg",
  attributes: [
    { trait_type: "Projekt", value: "Die Mark Digital" },
    { trait_type: "Symbol", value: "DMD" },
    { trait_type: "Supply", value: "150,000,000" }
  ],
  properties: {
    files: [{ uri: "https://s1.directupload.net/images/250809/hrmdi8v.jpg", type: "image/jpg" }],
    category: "image",
    creators: [{ address: "AqPFb5LWQuzKiyoKTX9XgUwsYWoFvpeE8E8uzQvnDTzT", share: 100 }]
  }
};

// Data-URI bauen (base64 der JSON)
const DATA_URI = "data:application/json;base64," + Buffer
  .from(JSON.stringify(META_JSON))
  .toString("base64");

// --- Verbindung / Provider ---
const connection = new Connection(RPC_URL, "confirmed");
const wallet = {
  publicKey: signer.publicKey,
  signTransaction: async (tx: Transaction) => { tx.partialSign(signer); return tx; },
  signAllTransactions: async (txs: Transaction[]) => txs.map(t => { t.partialSign(signer); return t; })
};
const provider = new anchor.AnchorProvider(connection, wallet as any, { commitment: "confirmed" });
anchor.setProvider(provider);

(async () => {
  console.log("🔑 Signer:", signer.publicKey.toBase58());
  console.log("🪙 Mint:", MINT.toBase58());

  // PDA für Metadata
  const [metadataPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("metadata"), TM_PROGRAM_ID.toBuffer(), MINT.toBuffer()],
    TM_PROGRAM_ID
  );
  console.log("🧩 Metadata PDA:", metadataPda.toBase58());

  // Gemeinsame DataV2
  const dataV2 = {
    name: "Die Mark Digital",   // kurz halten (Wallet-Limits)
    symbol: "DMD",              // <= 10 chars
    uri: DATA_URI,              // <- INLINE Data-URI
    sellerFeeBasisPoints: 0,    // fungible token -> 0
    creators: [{ address: UPDATE_AUTHORITY, verified: true, share: 100 }],
    collection: null,
    uses: null,
  };

  const existing = await connection.getAccountInfo(metadataPda);

  if (!existing) {
    // --- CREATE V3 ---
    const accounts = {
      metadata: metadataPda,
      mint: MINT,
      mintAuthority: signer.publicKey,
      payer: signer.publicKey,
      updateAuthority: UPDATE_AUTHORITY,
      systemProgram: SystemProgram.programId,
    };
    const args = {
      createMetadataAccountArgsV3: {
        data: dataV2,
        isMutable: true,
        collectionDetails: null,
      }
    };
    const ix = createCreateMetadataAccountV3Instruction(accounts, args);
    const tx = new Transaction().add(ix);
    tx.feePayer = signer.publicKey;
    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    tx.partialSign(signer);

    const sig = await connection.sendRawTransaction(tx.serialize(), { skipPreflight: false });
    await connection.confirmTransaction(sig, "confirmed");
    console.log("✅ Metadata angelegt:", sig);
  } else {
    // --- UPDATE V2 (nur URI/Name/Symbol etc. anfassen) ---
    const accounts = {
      metadata: metadataPda,
      updateAuthority: UPDATE_AUTHORITY,
    };
    const args = {
      updateMetadataAccountArgsV2: {
        data: dataV2,                 // neue Daten (inkl. Data-URI)
        updateAuthority: null,        // keine Änderung
        primarySaleHappened: null,    // unverändert
        isMutable: true,              // bleibt änderbar
      }
    };
    const ix = createUpdateMetadataAccountV2Instruction(accounts, args);
    const tx = new Transaction().add(ix);
    tx.feePayer = signer.publicKey;
    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;
    tx.partialSign(signer);

    const sig = await connection.sendRawTransaction(tx.serialize(), { skipPreflight: false });
    await connection.confirmTransaction(sig, "confirmed");
    console.log("🔁 Metadata aktualisiert:", sig);
  }

  console.log("👉 Wallet/Explorer refreshen. Falls eine Wallet Data-URIs nicht rendert, können wir jederzeit auf eine https-URI updaten – der Update-Call oben erledigt das in 1 Klick.");
})().catch((e) => {
  console.error("❌ Fehler:", e?.message || e);
});
